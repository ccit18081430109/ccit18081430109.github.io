{"meta":{"title":"Handsome Boy","subtitle":"","description":"","author":"Handsome Boy","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"一行LED","slug":"任意控制LED行列","date":"2020-06-23T13:48:17.000Z","updated":"2020-06-23T14:03:52.871Z","comments":true,"path":"2020/06/23/任意控制LED行列/","link":"","permalink":"http://yoursite.com/2020/06/23/%E4%BB%BB%E6%84%8F%E6%8E%A7%E5%88%B6LED%E8%A1%8C%E5%88%97/","excerpt":"","text":"代码如下：lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; &#x2F;&#x2F;选择设备 var connected_server; &#x2F;&#x2F;连接设备 var connected&#x3D;false;&#x2F;&#x2F;连接状态 var services_discovered&#x3D;false;&#x2F;&#x2F;发现设备状态 &#x2F;&#x2F; 添加服务和特性状态变量 var has_accelerometer_service &#x3D; false; &#x2F;&#x2F;加速度服务状态 var has_accelerometer_data &#x3D; false; &#x2F;&#x2F;加速度特性状态 var has_led_service &#x3D; false;&#x2F;&#x2F;led服务状态 var has_led_matrix_state &#x3D; false; &#x2F;&#x2F;led控制特性状态 var has_device_information_service &#x3D; false; &#x2F;&#x2F;设备信息服务状态 var has_model_name_string &#x3D; false; &#x2F;&#x2F;设备信息特性状态 var has_temperature_service &#x3D;false; &#x2F;&#x2F;温度服务状态 var has_tem_temperature &#x3D; false; &#x2F;&#x2F;温度特性状态 &#x2F;&#x2F; 服务 UUIDs ACCELEROMETER_SERVICE &#x3D; &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; LED_SERVICE &#x3D; &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; DEVICE_INFORMATION_SERVICE &#x3D; &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE_SERVICE &#x3D; &#39;e95d6100-251d-470a-a062-fa1922dfa9a8&#39;; &#x2F;&#x2F; 特性 UUIDs ACCELEROMETER_DATA &#x3D; &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; LED_MATRIX_STATE &#x3D; &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; MODEL_NUMBER_STRING &#x3D; &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; TEM_TEMPERATURE &#x3D; &#39;e95d1b25-251d-470a-a062-fa1922dfa9a8&#39;; &#x2F;&#x2F; 添加特性变量 var led_matrix_state; var model_number_string; var accelerometer_data; var tem_temperature; &#x2F;&#x2F;添加服务，特性相关参数 var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverOrdisconnectDevices()&#x2F;&#x2F; 断开连接 &#123; console.log(&quot;discoverOrdisconnectDevices&quot;); if(!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function onDisconnected()&#x2F;&#x2F;连接 &#123; console.log(&quot;onDisconnected&quot;); resetUI(); &#125; &#x2F;&#x2F;function input.temperature(): number; function discoverDevices()&#x2F;&#x2F; 搜索设备函数 &#123; console.log(&quot;discoverDevices&quot;); var options &#x3D; &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE] &#x2F;&#x2F;在第5节课上添加 &#125; &#x2F;&#x2F;发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) .then(device &#x3D;&gt; &#123; console.log(&#39;&gt; Name:&#39; + device.name); console.log(&#39;&gt; Id:&#39; + device.id); console.log(&#39;&gt; Connected:&#39; + device.gatt.connected); selected_device &#x3D; device; console.log(selected_device); connect(); &#125;) .catch(error &#x3D;&gt; &#123; alert(&#39;ERROR&#39; +error); console.log(&#39;ERROR&#39; +error); &#125;); &#125; function connect() &#x2F;&#x2F;连接函数 &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function (server) &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected &quot; + server.connected); selected_device.addEventListener(&#39;gattserverdisconnected&#39;,onDisconnected); connected_server &#x3D;server; discoverSvcsAndChars(); &#x2F;&#x2F;在第5课基础上添加的函数 setConnectedStatus(true); &#125;, function (error) &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status)&#x2F;&#x2F;设置连接状态 &#123; connected&#x3D;status; document.getElementById(&#39;status_connected&#39;).innerHTML &#x3D; status; if(status&#x3D;&#x3D;true) &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Discover Devices&quot;; &#125; &#125; function setDiscoveryStatus(status)&#x2F;&#x2F;设置发现状态 &#123; services_discovered&#x3D;status; document.getElementById(&#39;status_discovered&#39;).innerHTML&#x3D;status; &#125; function resetUI() &#x2F;&#x2F;重置页面 &#123; setConnectedStatus(false); &#125; function discoverSvcsAndChars() &#x2F;&#x2F;发现服务和特性 &#123; console.log(&quot;discoverSvcsAndChars server&#x3D;&quot; + connected_server); connected_server.getPrimaryServices() .then(services &#x3D;&gt; &#123; has_accelerometer_service &#x3D; false; has_led_service &#x3D; false; has_device_information_service &#x3D; false; has_temperature_service&#x3D; false; services_discovered &#x3D; 0; service_count &#x3D; services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service &#x3D;&gt; &#123; if (service.uuid &#x3D;&#x3D; ACCELEROMETER_SERVICE) &#123; has_accelerometer_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; LED_SERVICE) &#123; has_led_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; TEMPERATURE_SERVICE) &#x2F;&#x2F;温度 &#123; has_temperature_service &#x3D; true; &#125; console.log(&#39;Getting Characteristics for service &#39; + service.uuid); service.getCharacteristics() .then(characteristics &#x3D;&gt; &#123; console.log(&#39;&gt; Service: &#39; + service.uuid); services_discovered++; characteristics_discovered &#x3D; 0; characteristic_count &#x3D; characteristics.length; characteristics.forEach(characteristic &#x3D;&gt; &#123; characteristics_discovered++; console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid); if (characteristic.uuid &#x3D;&#x3D; ACCELEROMETER_DATA) &#123; accelerometer_data &#x3D; characteristic; has_accelerometer_data &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; LED_MATRIX_STATE) &#123; led_matrix_state &#x3D; characteristic; has_led_matrix_state &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; MODEL_NUMBER_STRING) &#123; model_number_string &#x3D; characteristic; has_model_name_string &#x3D; true; &#125; if(characteristic.uuid &#x3D;&#x3D; TEM_TEMPERATURE) &#x2F;&#x2F;温度 &#123; tem_temperature &#x3D; characteristic; has_tem_temperature &#x3D; true; &#125; if (services_discovered &#x3D;&#x3D; service_count &amp;&amp; characteristics_discovered &#x3D;&#x3D; characteristic_count) &#123; console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); &#x2F;&#x2F;setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; var i&#x3D;0,j&#x3D;0; function randomLEDs(ct) &#x2F;&#x2F;控制led &#123; console.log(&quot;randomLEDs&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_led_service) &#123; alert(&quot;Error: The connected device does not contain the LED service&quot;); return; &#125; if (!has_led_matrix_state) &#123; alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; &#125; var led_array&#x3D;[]; if(ct&#x3D;&#x3D;0) &#123; led_array[0] &#x3D; 1&lt;&lt;i; led_array[1] &#x3D; 1&lt;&lt;i; led_array[2] &#x3D; 1&lt;&lt;i; led_array[3] &#x3D; 1&lt;&lt;i; led_array[4] &#x3D; 1&lt;&lt;i; i++; if(i&#x3D;&#x3D;5)i&#x3D;0; &#125; else if(ct&#x3D;&#x3D;1) &#123; led_array[0] &#x3D; 0; led_array[1] &#x3D; 0; led_array[2] &#x3D; 0; led_array[3] &#x3D; 0; led_array[4] &#x3D; 0; led_array[j] &#x3D; 31; j++; if(j&#x3D;&#x3D;5)j&#x3D;0; &#125; &#x2F;&#x2F; Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 &#x2F;*led_array[0] &#x3D;10; led_array[1] &#x3D; 31; led_array[2] &#x3D; 31; led_array[3] &#x3D; 14; led_array[4] &#x3D; 4;*&#x2F; &#x2F;*led_array[0] &#x3D; 31; led_array[1] &#x3D; 17; led_array[2] &#x3D; 17; led_array[3] &#x3D; 17; led_array[4] &#x3D; 31; *&#x2F; var led_matrix_data &#x3D; new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ &#x3D;&gt; &#123; console.log(&#39;LED matrix state changed&#39;); &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; function readModelNumber() &#x2F;&#x2F; 蓝牙信息服务 &#123; console.log(&quot;readModelNumber&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_device_information_service) &#123; alert(&quot;Error: The connected device does not contain the device information service&quot;); return; &#125; if (!has_model_name_string) &#123; alert(&quot;Error: The connected device does not contain the model name string characteristic&quot;); return; &#125; model_number_string.readValue() .then(value &#x3D;&gt; &#123; data &#x3D; new Uint8Array(value.buffer); model_number_string &#x3D; new TextDecoder(&quot;utf-8&quot;).decode(data); console.log(model_number_string); document.getElementById(&quot;model_number&quot;).innerHTML &#x3D; model_number_string; &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; function accelerometer() &#x2F;&#x2F;加速度传感器 &#123; console.log(&quot;accelerometer&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_accelerometer_service) &#123; alert(&quot;Error: The connected device does not contain the accelerometer service&quot;); return; &#125; if (!has_accelerometer_data) &#123; alert(&quot;Error: The connected device does not contain the accelerometer_data characteristic&quot;); return; &#125; accelerometer_data.readValue() .then(value &#x3D;&gt; &#123; buffer &#x3D; value.buffer; dataview &#x3D; new DataView(buffer); X &#x3D; dataview.getUint16(0, true); Y &#x3D; dataview.getUint16(2, true); Z &#x3D; dataview.getUint16(4, true); console.log(&quot;X&#x3D;&quot; + X + &quot;, Y&#x3D;&quot; + Y + &quot;, Z+&quot; + Z); document.getElementById(&quot;ac_data&quot;).innerHTML &#x3D; &quot;X&#x3D;&quot; + X + &quot;, Y&#x3D;&quot; + Y + &quot;,Z&#x3D;&quot; + Z; &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; &lt;&#x2F;script&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;h2&gt; Status &lt;&#x2F;h2&gt; &lt;table border&#x3D;&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td id&#x3D;&quot;status_connected&quot;&gt; false &lt;&#x2F;td&gt; &lt;td id&#x3D;&quot;status_discovered&quot;&gt; false &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;table&gt; &lt;hr&gt; &lt;h2&gt; Device Discovery or Disconnect &lt;&#x2F;h2&gt; &lt;button id &#x3D; &quot;btn_scan&quot; onclick&#x3D;&quot;discoverOrdisconnectDevices()&quot;&gt;Start scan&lt;&#x2F;button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;&#x2F;h2&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;btn_write&quot; onclick&#x3D;&quot;randomLEDs(0)&quot;&gt;控制led行&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;btu_write&quot; onclick&#x3D;&quot;randomLEDs(1)&quot;&gt;控制led列&lt;&#x2F;button&gt; &lt;h3&gt;Read Characteristic - Model number&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;btn_read&quot; onclick&#x3D;&quot;readModelNumber()&quot;&gt;Read Model number&lt;&#x2F;button&gt; &lt;div id&#x3D;&quot;model_number&quot;&gt;&lt;&#x2F;div&gt; &lt;h3&gt;accelerometer_data&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;btn_readAC&quot; onclick&#x3D;&quot;accelerometer()&quot;&gt;Read accelerometer_data&lt;&#x2F;button&gt; &lt;div id&#x3D;&quot;ac_data&quot;&gt;&lt;&#x2F;div&gt; &lt;hr&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 显示结果","categories":[],"tags":[]},{"title":"启用通知","slug":"启用通知","date":"2020-06-23T12:47:38.000Z","updated":"2020-06-23T14:05:37.637Z","comments":true,"path":"2020/06/23/启用通知/","link":"","permalink":"http://yoursite.com/2020/06/23/%E5%90%AF%E7%94%A8%E9%80%9A%E7%9F%A5/","excerpt":"","text":"启用通知 相关代码 将程序 保存成html格式，用谷歌浏览器打开，如下图所示： 相关代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 &lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; var connected_server; var connected &#x3D; false; var services_discovered &#x3D; false; &#x2F;&#x2F;在第5课上添加 var notifications_enabled &#x3D; false; &#x2F;&#x2F;在第5课上添加以下内容 var has_accelerometer_service &#x3D; false; var has_accelerometer_data &#x3D; false; var has_led_service &#x3D; false; var has_led_matrix_state &#x3D; false; var has_device_information_service &#x3D; false; var has_model_name_string &#x3D; false; &#x2F;&#x2F; service UUIDs ACCELEROMETER_SERVICE &#x3D; &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; LED_SERVICE &#x3D; &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; DEVICE_INFORMATION_SERVICE &#x3D; &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;; &#x2F;&#x2F; characteristic UUIDs ACCELEROMETER_DATA &#x3D; &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; LED_MATRIX_STATE &#x3D; &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; MODEL_NUMBER_STRING &#x3D; &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; &#x2F;&#x2F; cached characteristics var led_matrix_state; var model_number_string; var accelerometer_data; &#x2F;&#x2F; var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverOrdisconnectDevices() &#123; console.log(&quot;discoverDevicesOrDisconnect&quot;); if (!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function setNotificationsStatus(status) &#123; notifications_enabled &#x3D; status; document.getElementById(&#39;status_notifications&#39;).innerHTML &#x3D; status; &#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309 function onDisconnected() &#123; console.log(&quot;onDisconnected&quot;); resetUI(); &#125; function onAccelerometerData(event) &#123; console.log(&quot;onAccelerometerData&quot;); buffer &#x3D; event.target.value.buffer; dataview &#x3D; new DataView(buffer); X &#x3D; dataview.getUint16(0, true); Y &#x3D; dataview.getUint16(2, true); Z &#x3D; dataview.getUint16(4, true); console.log(&quot;X&#x3D;&quot; + X + &quot;, Y&#x3D;&quot; + Y + &quot;, Z+&quot; + Z); document.getElementById(&quot;accelerometer_data&quot;).innerHTML &#x3D; &quot;X&#x3D;&quot; + X + &quot;, Y&#x3D;&quot; + Y + &quot;, Z&#x3D;&quot; + Z; &#125; function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); var options &#x3D; &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE] &#x2F;&#x2F;在第5节课上添加 &#125; navigator.bluetooth.requestDevice(options) .then(device &#x3D;&gt; &#123; console.log(&#39;&gt; Name:&#39; + device.name); console.log(&#39;&gt; Id:&#39; + device.id); console.log(&#39;&gt; Connected:&#39; + device.gatt.connected); selected_device &#x3D; device; console.log(selected_device); connect(); &#125;) .catch(error &#x3D;&gt; &#123; alert(&#39;ERROR:&#39; +error); console.log(&#39;ERROR:&#39; + error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function (server) &#x2F;&#x2F;表示连接成功 &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected&#x3D;&quot; + server.connected); selected_device.addEventListener( &#39;gattserverdisconnected&#39;,onDisconnected); &#x2F;&#x2F; 在第4课基础上添加的函数 connected_server &#x3D; server; discoverSvcsAndChars(); &#x2F;&#x2F;&#x2F;&#x2F;在第5课基础上添加的函数 setConnectedStatus(true); &#x2F;&#x2F; 在第3课基础上添加的函数,设置电脑蓝牙的当前连接状态 &#125;, function (error) &#x2F;&#x2F;表示连接失败 &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#x2F;&#x2F; 在第3课基础上添加的函数,设置电脑蓝牙的当前连接状态 &#125; ); &#125; function setConnectedStatus(status) &#x2F;&#x2F; 在第3课基础上添加的函数,设置电脑蓝牙的当前连接状态 &#123; connected &#x3D; status; document.getElementById(&#39;status_connected&#39;).innerHTML &#x3D; status; if (status &#x3D;&#x3D; true) &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Discover Devices&quot;; &#125; &#125; function setDiscoveryStatus(status) &#123; services_discovered &#x3D; status; document.getElementById(&#39;status_discovered&#39;).innerHTML &#x3D; status; &#125; function resetUI() &#x2F;&#x2F; 在第4课基础上添加的函数 &#123; setConnectedStatus(false); setDiscoveryStatus(false); &#x2F;&#x2F; 在第5课基础上添加的函数 setNotificationsStatus(false); &#125; function discoverSvcsAndChars() &#x2F;&#x2F;在第5课基础上添加的函数 &#123; console.log(&quot;discoverSvcsAndChars server&#x3D;&quot; + connected_server); connected_server.getPrimaryServices()&#x2F;&#x2F;调用函数去获取BBC上的相应的服务 .then(services &#x3D;&gt; &#x2F;&#x2F;对服务进行判断 &#123; has_accelerometer_service &#x3D; false; has_led_service &#x3D; false; has_device_information_service &#x3D; false; services_discovered &#x3D; 0; service_count &#x3D; services.length; &#x2F;&#x2F;发现BBC板服务的个数 console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service &#x3D;&gt; &#x2F;&#x2F;对已发现的所有服务进行判断 &#123; if (service.uuid &#x3D;&#x3D; ACCELEROMETER_SERVICE) &#123; has_accelerometer_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; LED_SERVICE) &#123; has_led_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service &#x3D; true; &#125; console.log(&#39;Getting Characteristics for service &#39; + service.uuid); service.getCharacteristics() &#x2F;&#x2F;获取相应服务的所有特性 .then(characteristics &#x3D;&gt; &#123; console.log(&#39;&gt; Service: &#39; + service.uuid); services_discovered++; &#x2F;&#x2F;发现一个就加一 characteristics_discovered &#x3D; 0; characteristic_count &#x3D; characteristics.length; &#x2F;&#x2F;特性的个数 characteristics.forEach(characteristic &#x3D;&gt; &#x2F;&#x2F;对已发现的特性进行判断 &#123; characteristics_discovered++; console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid); if (characteristic.uuid &#x3D;&#x3D; ACCELEROMETER_DATA) &#123; accelerometer_data &#x3D; characteristic; &#x2F;&#x2F;把发现的相应特性保存到相应变量中 has_accelerometer_data &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; LED_MATRIX_STATE) &#123; led_matrix_state &#x3D; characteristic; has_led_matrix_state &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; MODEL_NUMBER_STRING) &#123; model_number_string &#x3D; characteristic; has_model_name_string &#x3D; true; &#125; if (services_discovered &#x3D;&#x3D; service_count &amp;&amp; characteristics_discovered &#x3D;&#x3D; characteristic_count) &#123; console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); &#x2F;&#x2F;setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; function randomLEDs()&#x2F;&#x2F;第六节课添加 &#123; console.log(&quot;randomLEDs&quot;); &#x2F;&#x2F;state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return &#125; if (!services_discovered)&#x2F;&#x2F;有没有发现所有服务 &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return &#125; if (!has_led_service) &#123; alert(&quot;Error: The connected device does not contain the LED service&quot;); return &#125; if (!has_led_matrix_state)&#x2F;&#x2F;led灯的特性有没有被发现的一个标记变量 &#123; alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; &#125; var led_array &#x3D; [0, 0, 0, 0, 0]; &#x2F;&#x2F;math.random():0~1 math.floor(x):返回小于等于x的最大整数 led_array[0] &#x3D; Math.floor(Math.random() * 32); led_array[1] &#x3D; 1; led_array[2] &#x3D; 2; led_array[3] &#x3D; 3; led_array[4] &#x3D; 4; var led_matrix_data &#x3D; new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer)&#x2F;&#x2F;控制板子上灯亮灭 .then(_ &#x3D;&gt; &#123; console.log(&#39;LED matrix state changed&#39;); &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; +error); return; &#125;); &#125;function readModelNumber() &#123; console.log(&quot;readModelNumber&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_device_information_service) &#123; alert(&quot;Error: The connected device does not contain the device information service&quot;); return; &#125; if (!has_model_name_string) &#123; alert(&quot;Error: The connected device does not contain the model name string characteristic&quot;); return; &#125; model_number_string.readValue() .then(value &#x3D;&gt; &#123; data &#x3D; new Uint8Array(value.buffer); model_number_string &#x3D; new TextDecoder(&quot;utf8&quot;).decode(data); console.log(model_number_string); document.getElementById(&quot;model_number&quot;).innerHTML &#x3D; model_number_string; &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125;function toggleAccelerometerNotifications() &#123; console.log(&quot;toggleAccelerometerNotifications&quot;); if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_accelerometer_service) &#123; alert(&quot;Error: The connected device does not contain the accelerometer service&quot;); return; &#125; if (!has_accelerometer_data) &#123; alert(&quot;Error: The connected device does not contain the accelerometer data characteristic&quot;); return; &#125; if (!notifications_enabled) &#123; accelerometer_data.startNotifications() .then(_ &#x3D;&gt; &#123; console.log(&#39;accelerometer notifications started&#39;); setNotificationsStatus(true); accelerometer_data.addEventListener(&#39;characteristicvaluechanged&#39;, onAccelerometerData); &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; else &#123; accelerometer_data.stopNotifications() .then(_ &#x3D;&gt; &#123; console.log(&#39;accelerometer notificaions stopped&#39;); setNotificationsStatus(false); accelerometer_data.removeEventListener(&#39;characteristicvaluechanged&#39;, onAccelerometerData); &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Could not stop accelerometer_data notifications: &#39; + error); &#125;); &#125;&#125;&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt; &lt;h2&gt; Status&lt;&#x2F;h2&gt;&lt;table border&#x3D;&quot;1&quot;&gt; &lt;tr&gt; &lt;!--表格的第一行 --&gt; &lt;td&gt;&lt;b&gt;Connected&lt;&#x2F;b&gt;&lt;&#x2F;td&gt; &lt;td&gt;&lt;b&gt;Service Discovery Completed&lt;&#x2F;b&gt;&lt;&#x2F;td&gt; &lt;td&gt; &lt;b&gt;Notifications&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;!--表格的第二行 --&gt; &lt;td id&#x3D;&quot;status_connected&quot;&gt; false &lt;&#x2F;td&gt; &lt;td id&#x3D;&quot;status_discovered&quot;&gt; false &lt;&#x2F;td&gt; &lt;td id&#x3D;&quot;status_notifications&quot;&gt;false&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;&lt;h2&gt; Device Discovery Or Disconnect &lt;!-- 扫描&#x2F;发现蓝牙设备 --&gt; &lt;&#x2F;h2 &gt;&lt;button id&#x3D;&quot;btn_scan&quot; onclick&#x3D;&quot;discoverOrdisconnectDevices()&quot;&gt;Start scan&lt;&#x2F;button&gt;&lt;hr&gt;&lt;h2&gt;Reading and Writing&lt;&#x2F;h2&gt;&lt;h3&gt;Write Characteristic - Randomise Lights&lt;&#x2F;h3&gt;&lt;button id&#x3D;&quot;btn_write&quot; onclick&#x3D;&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;&#x2F;button&gt;&lt;h3&gt;Read Characteristic - Model Number&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;btn_read&quot; onclick&#x3D;&quot;readModelNumber()&quot;&gt;Read Model Number&lt;&#x2F;button&gt; &lt;div id&#x3D;&quot;model_number&quot;&gt;&lt;&#x2F;div&gt; &lt;hr&gt; &lt;h2&gt;Notifications - Accelerometer X, Y, Z&lt;&#x2F;h2&gt; &lt;button id&#x3D;&quot;btn_notify&quot; onclick&#x3D;&quot;toggleAccelerometerNotifications()&quot;&gt;Toggle Notifications&lt;&#x2F;button&gt; &lt;div id&#x3D;&quot;accelerometer_data&quot;&gt;&lt;&#x2F;div&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 显示结果","categories":[],"tags":[]}],"categories":[],"tags":[]}